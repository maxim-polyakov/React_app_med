[{"D:\\GitHub\\React_app_med\\client\\src\\http\\userApi.js":"1","D:\\GitHub\\React_app_med\\client\\src\\http\\index.js":"2","D:\\GitHub\\React_app_med\\client\\src\\index.tsx":"3","D:\\GitHub\\React_app_med\\client\\src\\store\\DeviceStore.ts":"4","D:\\GitHub\\React_app_med\\client\\src\\store\\UserStore.ts":"5","D:\\GitHub\\React_app_med\\client\\src\\App.tsx":"6","D:\\GitHub\\React_app_med\\client\\src\\http\\deviceApi.ts":"7","D:\\GitHub\\React_app_med\\client\\src\\components\\Navbar\\Navbar.tsx":"8","D:\\GitHub\\React_app_med\\client\\src\\components\\AppRouter.tsx":"9","D:\\GitHub\\React_app_med\\client\\src\\Routes.ts":"10","D:\\GitHub\\React_app_med\\client\\src\\utils\\consts.ts":"11","D:\\GitHub\\React_app_med\\client\\src\\pages\\index.ts":"12","D:\\GitHub\\React_app_med\\client\\src\\pages\\Shop.tsx":"13","D:\\GitHub\\React_app_med\\client\\src\\pages\\DevicePage.tsx":"14","D:\\GitHub\\React_app_med\\client\\src\\pages\\Basket.tsx":"15","D:\\GitHub\\React_app_med\\client\\src\\pages\\Admin.tsx":"16","D:\\GitHub\\React_app_med\\client\\src\\pages\\Auth.tsx":"17","D:\\GitHub\\React_app_med\\client\\src\\components\\TypeBar\\TypeBar.tsx":"18","D:\\GitHub\\React_app_med\\client\\src\\components\\BrandBar\\BrandBar.tsx":"19","D:\\GitHub\\React_app_med\\client\\src\\components\\DeviceList\\DeviceList.tsx":"20","D:\\GitHub\\React_app_med\\client\\src\\components\\Pages\\Pages.tsx":"21","D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateBrand.tsx":"22","D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateType.tsx":"23","D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateDevice.tsx":"24","D:\\GitHub\\React_app_med\\client\\src\\components\\DeviceList\\DeviceItem\\DeviceItem.tsx":"25"},{"size":789,"mtime":1740844494430,"results":"26","hashOfConfig":"27"},{"size":430,"mtime":1740844494425,"results":"28","hashOfConfig":"27"},{"size":735,"mtime":1740844494433,"results":"29","hashOfConfig":"27"},{"size":3077,"mtime":1740844494450,"results":"30","hashOfConfig":"27"},{"size":672,"mtime":1740844494450,"results":"31","hashOfConfig":"27"},{"size":1599,"mtime":1740844494400,"results":"32","hashOfConfig":"27"},{"size":1322,"mtime":1740844494425,"results":"33","hashOfConfig":"27"},{"size":2276,"mtime":1740844494416,"results":"34","hashOfConfig":"27"},{"size":1485,"mtime":1740844494400,"results":"35","hashOfConfig":"27"},{"size":729,"mtime":1740844494400,"results":"36","hashOfConfig":"27"},{"size":240,"mtime":1740844494450,"results":"37","hashOfConfig":"27"},{"size":178,"mtime":1740844494441,"results":"38","hashOfConfig":"27"},{"size":1618,"mtime":1740844494441,"results":"39","hashOfConfig":"27"},{"size":4220,"mtime":1740844494441,"results":"40","hashOfConfig":"27"},{"size":108,"mtime":1740844494441,"results":"41","hashOfConfig":"27"},{"size":1769,"mtime":1740844494433,"results":"42","hashOfConfig":"27"},{"size":5195,"mtime":1740844494433,"results":"43","hashOfConfig":"27"},{"size":734,"mtime":1740844494425,"results":"44","hashOfConfig":"27"},{"size":998,"mtime":1740844494408,"results":"45","hashOfConfig":"27"},{"size":553,"mtime":1740844494408,"results":"46","hashOfConfig":"27"},{"size":925,"mtime":1740844494416,"results":"47","hashOfConfig":"27"},{"size":1455,"mtime":1740844494408,"results":"48","hashOfConfig":"27"},{"size":1375,"mtime":1740844494416,"results":"49","hashOfConfig":"27"},{"size":8190,"mtime":1740844494416,"results":"50","hashOfConfig":"27"},{"size":1302,"mtime":1740844494408,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gk9cv",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\GitHub\\React_app_med\\client\\src\\http\\userApi.js",[],"D:\\GitHub\\React_app_med\\client\\src\\http\\index.js",[],"D:\\GitHub\\React_app_med\\client\\src\\index.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\store\\DeviceStore.ts",[],"D:\\GitHub\\React_app_med\\client\\src\\store\\UserStore.ts",[],"D:\\GitHub\\React_app_med\\client\\src\\App.tsx",["111"],"import { BrowserRouter } from \"react-router-dom\";\r\nimport { AppRouter } from \"./components/AppRouter\";\r\nimport { MyNavbar } from \"./components/Navbar/Navbar\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Context } from \".\";\r\nimport { check } from \"./http/userApi\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { fetchBrands, fetchDevices, fetchTypes } from \"./http/deviceApi\";\r\n\r\nconst App = observer(() => {\r\n    const { user, devices } = useContext(Context);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setTimeout(() => {\r\n                fetchTypes().then((data) => devices?.setTypes(data));\r\n                fetchBrands().then((data) => devices?.setBrands(data));\r\n                fetchDevices(null!, null!, 1, 3).then((data) => {\r\n                    devices?.setDevices(data.rows);\r\n                    devices?.setTotalCount(data.count);\r\n                });\r\n\r\n                check()\r\n                    .then((data) => {\r\n                        user?.setUser(data);\r\n                        user?.setIsAuth(true);\r\n                    })\r\n                    .finally(() => setLoading(false));\r\n            }, 1000);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Spinner animation=\"grow\"></Spinner>;\r\n    }\r\n    return (\r\n        <BrowserRouter>\r\n            <MyNavbar></MyNavbar>\r\n            <AppRouter></AppRouter>\r\n        </BrowserRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n","D:\\GitHub\\React_app_med\\client\\src\\http\\deviceApi.ts",["112","113"],"import { $host, $authhost } from \".\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport {\r\n    BrandsInterface,\r\n    DevicesInterface,\r\n    TypesInterface,\r\n} from \"../store/DeviceStore\";\r\n\r\nexport const createType = async (type: TypesInterface) => {\r\n    const { data } = await $authhost.post(\"api/type\", type);\r\n    return data;\r\n};\r\n\r\nexport const fetchTypes = async () => {\r\n    const { data } = await $host.get(\"api/type\");\r\n    return data;\r\n};\r\n\r\nexport const createBrand = async (brand: BrandsInterface) => {\r\n    const { data } = await $authhost.post(\"api/brand\", brand);\r\n    return data;\r\n};\r\n\r\nexport const fetchBrands = async () => {\r\n    const { data } = await $host.get(\"api/brand\");\r\n    return data;\r\n};\r\n\r\nexport const createDevice = async (device: any) => {\r\n    const { data } = await $authhost.post(\"api/device\", device);\r\n    return data;\r\n};\r\n\r\nexport const fetchDevices = async (\r\n    typeId: number,\r\n    brandId: number,\r\n    page: number,\r\n    limit = 3\r\n) => {\r\n    const { data } = await $host.get(\"api/device\", {\r\n        params: {\r\n            typeId,\r\n            brandId,\r\n            page,\r\n            limit,\r\n        },\r\n    });\r\n    return data;\r\n};\r\n\r\nexport const fetchOneDevice = async (id: any) => {\r\n    const { data } = await $host.get(`api/device/${id}`);\r\n    return data;\r\n};\r\n","D:\\GitHub\\React_app_med\\client\\src\\components\\Navbar\\Navbar.tsx",["114","115","116"],"import { FC, useContext } from \"react\";\r\nimport { Context } from \"../..\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { Button, Container, Nav } from \"react-bootstrap\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n    ADMIN_ROUTE,\r\n    LOGIN_ROUTE,\r\n    REGISTRATION_ROUTE,\r\n    SHOP_ROUTE,\r\n} from \"../../utils/consts\";\r\n\r\nexport const MyNavbar: FC = observer(() => {\r\n    const { user, devices } = useContext(Context);\r\n\r\n    const logOut = () => {\r\n        user?.setUser({});\r\n        user?.setIsAuth(false);\r\n        localStorage.removeItem(\"token\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Navbar bg=\"dark\" data-bs-theme=\"dark\">\r\n                <Container>\r\n                    <NavLink\r\n                        style={{ color: \"white\", textDecoration: \"none\" }}\r\n                        to=\"/\"\r\n                    >\r\n                        MyStore\r\n                    </NavLink>\r\n                    {user?.isAuth ? (\r\n                        <Nav className=\"ml-auto\">\r\n                            <Link to={ADMIN_ROUTE}>\r\n                                <Button variant=\"outline-light\">\r\n                                    Админ панель\r\n                                </Button>\r\n                            </Link>\r\n                            <Link to={LOGIN_ROUTE}>\r\n                                <Button\r\n                                    variant=\"outline-light\"\r\n                                    style={{ marginLeft: \"0.5rem\" }}\r\n                                    onClick={() => logOut()}\r\n                                >\r\n                                    Выйти\r\n                                </Button>\r\n                            </Link>\r\n                        </Nav>\r\n                    ) : (\r\n                        <Nav className=\"ml-auto\">\r\n                            <Link to={LOGIN_ROUTE}>\r\n                                <Button variant=\"outline-light\">\r\n                                    Авторизация\r\n                                </Button>\r\n                            </Link>\r\n                        </Nav>\r\n                    )}\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    );\r\n});\r\n","D:\\GitHub\\React_app_med\\client\\src\\components\\AppRouter.tsx",["117","118","119","120","121","122","123"],"import React, { FC, useContext, useEffect, useState } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport { Shop, Admin, Auth, DevicePage, Basket } from \"../pages\";\r\nimport { authRoutes, publickRoutes } from \"../Routes\";\r\nimport { Context } from \"..\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const AppRouter: FC = observer(() => {\r\n    const { user } = useContext(Context);\r\n\r\n    let isAuth = user?._isAuth;\r\n\r\n    return (\r\n        <Routes>\r\n            {isAuth &&\r\n                authRoutes.map(({ path, Component }) => {\r\n                    return (\r\n                        <Route\r\n                            key={path}\r\n                            path={path}\r\n                            Component={Component}\r\n                        ></Route>\r\n                    );\r\n                })}\r\n            {publickRoutes.map(({ path, Component }) => (\r\n                <Route key={path} path={path} Component={Component}></Route>\r\n            ))}\r\n            <Route path=\"*\" element={<Shop></Shop>}></Route>\r\n        </Routes>\r\n    );\r\n});\r\n\r\n{\r\n    /* <Route path=\"/\" Component={Shop}></Route>\r\n            <Route path=\"/admin\" element={<Admin></Admin>}></Route>\r\n            <Route path=\"/auth\" element={<Auth></Auth>}></Route>\r\n            <Route path=\"/basket\" element={<Basket></Basket>}></Route>\r\n            <Route\r\n                path=\"/device/:id\"\r\n                element={<DevicePage></DevicePage>}\r\n            ></Route> */\r\n}\r\n","D:\\GitHub\\React_app_med\\client\\src\\Routes.ts",[],"D:\\GitHub\\React_app_med\\client\\src\\utils\\consts.ts",[],"D:\\GitHub\\React_app_med\\client\\src\\pages\\index.ts",[],"D:\\GitHub\\React_app_med\\client\\src\\pages\\Shop.tsx",["124","125","126"],"import React, { FC, useContext, useEffect } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { TypeBar } from \"../components/TypeBar/TypeBar\";\r\nimport { BrandBar } from \"../components/BrandBar/BrandBar\";\r\nimport { DeviceList } from \"../components/DeviceList/DeviceList\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Context } from \"..\";\r\nimport { fetchBrands, fetchDevices, fetchTypes } from \"../http/deviceApi\";\r\nimport { Pages } from \"../components/Pages/Pages\";\r\n\r\nexport const Shop: FC = observer(() => {\r\n    const { devices } = useContext(Context);\r\n\r\n    useEffect(() => {\r\n        fetchDevices(\r\n            devices?.selectedType?.id!,\r\n            devices?.selectedBrand?.id!,\r\n            devices?.page!,\r\n            2\r\n        ).then((data) => {\r\n            if (data.rows) {\r\n                devices?.setDevices(data?.rows);\r\n            } else {\r\n                devices?.setDevices(data);\r\n            }\r\n            if (data.count) {\r\n                devices?.setTotalCount(data?.count);\r\n            } else {\r\n                devices?.setTotalCount(data);\r\n            }\r\n        });\r\n    }, [devices?.page, devices?.selectedType, devices?.selectedBrand]);\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"mt-2\">\r\n                <Col md={3}>\r\n                    <TypeBar></TypeBar>\r\n                </Col>\r\n                <Col md={9}>\r\n                    <BrandBar></BrandBar>\r\n                    <DeviceList></DeviceList>\r\n                    <Pages></Pages>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","D:\\GitHub\\React_app_med\\client\\src\\pages\\DevicePage.tsx",["127","128","129","130"],"import { FC, useContext, useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Container, Image, Row } from \"react-bootstrap\";\r\nimport { Context } from \"..\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IoStarOutline } from \"react-icons/io5\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { fetchOneDevice } from \"../http/deviceApi\";\r\nimport { DevicesInterface } from \"../store/DeviceStore\";\r\n\r\ninterface descriptionInterface {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport const DevicePage: FC = observer(() => {\r\n    const [device, setDevice] = useState<DevicesInterface>({\r\n        id: 0, // Установите здесь значения по умолчанию или оставьте пустыми в зависимости от ваших потребностей\r\n        name: \"\",\r\n        price: 0,\r\n        rating: 0,\r\n        img: \"\",\r\n        brandId: 0,\r\n        typeId: 0,\r\n        info: [],\r\n    });\r\n\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        fetchOneDevice(id).then((data) => setDevice(data));\r\n    }, []);\r\n\r\n    // `${process.env.REACT_APP_API_URL}/${device?.img}`\r\n    return (\r\n        <Container className=\"mt-3\">\r\n            <Row>\r\n                {device.img && (\r\n                    <Col md={4}>\r\n                        <Image\r\n                            width={300}\r\n                            height={300}\r\n                            src={`${process.env.REACT_APP_API_URL}/${device.img}`}\r\n                        ></Image>\r\n                    </Col>\r\n                )}\r\n                <Col md={4}>\r\n                    <div className=\"d-flex flex-column align-items-center justify-content-center\">\r\n                        <h2>{device?.name}</h2>\r\n                        <div\r\n                            className=\"d-flex align-items-center justify-content-center \"\r\n                            style={{\r\n                                background: `url(https://upload.wikimedia.org/wikipedia/commons/f/fd/A_star.png) no-repeat center center`,\r\n                                width: 240,\r\n                                height: 240,\r\n                                backgroundSize: \"cover\",\r\n                                fontSize: 64,\r\n                            }}\r\n                        >\r\n                            <span style={{ marginRight: 8, marginTop: 8 }}>\r\n                                {device?.rating}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Card\r\n                        className=\"d-flex flex-column align-items-center justify-content-center\"\r\n                        style={{\r\n                            width: 300,\r\n                            height: 300,\r\n                            fontSize: 32,\r\n                            border: \"5px solid lightgray\",\r\n                        }}\r\n                    >\r\n                        <h3>От: {device?.price} руб.</h3>\r\n                        <Button variant=\"outline-dark\">\r\n                            Добавить в корзину\r\n                        </Button>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"d-flex mt-3\">\r\n                <h2>Описание</h2>\r\n                {device.info &&\r\n                    device.info.map(\r\n                        (item: descriptionInterface, index: number) => (\r\n                            <Row\r\n                                key={item.id}\r\n                                style={{\r\n                                    background:\r\n                                        index % 2 === 0\r\n                                            ? \"lightgray\"\r\n                                            : \"transparent\",\r\n                                    padding: 10,\r\n                                }}\r\n                            >\r\n                                {item.title} : {item.description}\r\n                            </Row>\r\n                        )\r\n                    )}\r\n                {}\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","D:\\GitHub\\React_app_med\\client\\src\\pages\\Basket.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\pages\\Admin.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\pages\\Auth.tsx",["131","132"],"import React, { FC, useContext, useState } from \"react\";\r\nimport { Button, Card, Container, Form, Row } from \"react-bootstrap\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { LOGIN_ROUTE, REGISTRATION_ROUTE } from \"../utils/consts\";\r\nimport { login, registration } from \"../http/userApi\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Context } from \"..\";\r\n\r\nexport const Auth: FC = observer(() => {\r\n    const { user } = useContext(Context);\r\n    const location = useLocation();\r\n    const isLogin = location.pathname === LOGIN_ROUTE && true;\r\n    const navigate = useNavigate();\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const swapMethod = () => {\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n    };\r\n\r\n    const signIn = async () => {\r\n        try {\r\n            let data;\r\n            if (isLogin) {\r\n                data = await login(email, password);\r\n\r\n                navigate(\"/\");\r\n            } else {\r\n                data = await registration(email, password);\r\n\r\n                navigate(\"/\");\r\n            }\r\n\r\n            user?.setUser(user);\r\n            user?.setIsAuth(true);\r\n\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n        } catch (e: any) {\r\n            console.log(e.response.data);\r\n        }\r\n    };\r\n\r\n    return isLogin ? (\r\n        <Container\r\n            className=\"d-flex justify-content-center align-items-center\"\r\n            style={{ height: window.innerHeight - 54 }}\r\n        >\r\n            <Card style={{ width: 600 }} className=\"p-5\">\r\n                <h2 className=\"m-auto\">Авторизация</h2>\r\n                <Form className=\"d-flex flex-column\">\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите email\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.Control\r\n                        className=\"mt-2\"\r\n                        placeholder=\"Введите пароль\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                    ></Form.Control>\r\n                    <div className=\"d-flex justify-content-between mt-3 pl-3 pr-3 falign-items-center\">\r\n                        <div>\r\n                            Нет аккаунта?\r\n                            <Link\r\n                                to={REGISTRATION_ROUTE}\r\n                                style={{ textDecoration: \"none\" }}\r\n                                onClick={() => swapMethod()}\r\n                            >\r\n                                {\" \"}\r\n                                Регистрация\r\n                            </Link>\r\n                        </div>\r\n                        <Button\r\n                            variant=\"outline-success\"\r\n                            onClick={() => signIn()}\r\n                        >\r\n                            Войти\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    ) : (\r\n        <Container\r\n            className=\"d-flex justify-content-center align-items-center\"\r\n            style={{ height: window.innerHeight - 54 }}\r\n        >\r\n            <Card style={{ width: 600 }} className=\"p-5\">\r\n                <h2 className=\"m-auto\">Регистрация</h2>\r\n                <Form className=\"d-flex flex-column\">\r\n                    <Form.Control\r\n                        className=\"mt-3\"\r\n                        placeholder=\"Введите email\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    ></Form.Control>\r\n                    <Form.Control\r\n                        className=\"mt-2\"\r\n                        placeholder=\"Введите пароль\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                    <div className=\"d-flex justify-content-between mt-3 pl-3 pr-3 falign-items-center\">\r\n                        <div>\r\n                            Уже есть аккаунт?\r\n                            <Link\r\n                                to={LOGIN_ROUTE}\r\n                                style={{ textDecoration: \"none\" }}\r\n                                onClick={() => swapMethod()}\r\n                            >\r\n                                {\" \"}\r\n                                Войти\r\n                            </Link>\r\n                        </div>\r\n                        <Button\r\n                            variant=\"outline-success\"\r\n                            onClick={() => signIn()}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </Card>\r\n        </Container>\r\n    );\r\n});\r\n","D:\\GitHub\\React_app_med\\client\\src\\components\\TypeBar\\TypeBar.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\components\\BrandBar\\BrandBar.tsx",["133","134"],"import { FC, useContext } from \"react\";\r\nimport { Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { Context } from \"../..\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const BrandBar: FC = observer(() => {\r\n    const { devices } = useContext(Context);\r\n\r\n    return (\r\n        <Row className=\"d-flex\" bsPrefix=\"col\">\r\n            {devices?.brands.map((brand) => (\r\n                <Card\r\n                    border={\r\n                        brand.id === devices.selectedBrand?.id\r\n                            ? \"success\"\r\n                            : \"light\"\r\n                    }\r\n                    className=\"p-3\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    // active={devices._selectedBrand?.id === brand.id}\r\n                    key={brand.id}\r\n                    onClick={() => devices.setSelectedBrand(brand)}\r\n                >\r\n                    {brand.name}\r\n                </Card>\r\n            ))}\r\n        </Row>\r\n    );\r\n});\r\n","D:\\GitHub\\React_app_med\\client\\src\\components\\DeviceList\\DeviceList.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\components\\Pages\\Pages.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateBrand.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateType.tsx",[],"D:\\GitHub\\React_app_med\\client\\src\\components\\Modals\\CreateDevice.tsx",["135"],"import React, { FC, useContext, useRef, useState } from \"react\";\r\nimport { Button, Col, Dropdown, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Context } from \"../..\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { createDevice } from \"../../http/deviceApi\";\r\n\r\ninterface CreateDeviceProps {\r\n    show: boolean;\r\n    onHide: any;\r\n}\r\n\r\ninterface InfoInterface {\r\n    title: string;\r\n    description: string;\r\n    number: number;\r\n}\r\n\r\nexport const CreateDevice: FC<CreateDeviceProps> = observer(\r\n    ({ show, onHide }) => {\r\n        const { devices } = useContext(Context);\r\n        const [info, setInfo] = useState<InfoInterface[] | []>([]);\r\n\r\n        const [name, setName] = useState(\"\");\r\n        const [price, setPrice] = useState<number | \"\">(\"\");\r\n        const [file, setFile] = useState(\"\");\r\n\r\n        const addInfo = () => {\r\n            setInfo((prev) => {\r\n                return [\r\n                    ...prev,\r\n                    { title: \"\", description: \"\", number: Date.now() },\r\n                ];\r\n            });\r\n        };\r\n\r\n        const changeInfo = (key: string, value: string, number: number) => {\r\n            setInfo((prev) =>\r\n                prev.map((i) =>\r\n                    i.number === number ? { ...i, [key]: value } : i\r\n                )\r\n            );\r\n        };\r\n\r\n        const addDevice = () => {\r\n            const formData = new FormData();\r\n            formData.append(\"name\", name);\r\n            formData.append(\"price\", `${price}`);\r\n            formData.append(\"img\", file);\r\n            formData.append(\"brandId\", `${devices?.selectedBrand?.id}`);\r\n            formData.append(\"typeId\", `${devices?.selectedType?.id}`);\r\n            formData.append(\"info\", JSON.stringify(info));\r\n            createDevice(formData).then((data) => onHide());\r\n        };\r\n\r\n        const removeInfo = (number: number) => {\r\n            setInfo(info.filter((i) => i.number !== number));\r\n        };\r\n\r\n        const selectFile = (e: any) => {\r\n            if (e.target.files) {\r\n                setFile(e.target.files[0]);\r\n            }\r\n        };\r\n        return (\r\n            <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Добавить девайс\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form className=\"d-flex gap-1\">\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle className=\"w-40\">\r\n                                {devices?.selectedType?.name || \"Выберите тип\"}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {devices?.types.map((type) => (\r\n                                    <Dropdown.Item\r\n                                        onClick={() =>\r\n                                            devices.setSelectedType(type)\r\n                                        }\r\n                                        key={type.id}\r\n                                    >\r\n                                        {type.name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <Dropdown>\r\n                            <Dropdown.Toggle className=\"w-40\">\r\n                                {devices?.selectedBrand?.name ||\r\n                                    \"Выберите брэнд\"}\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {devices?.brands.map((brand) => (\r\n                                    <Dropdown.Item\r\n                                        onClick={() =>\r\n                                            devices.setSelectedBrand(brand)\r\n                                        }\r\n                                        key={brand.id}\r\n                                    >\r\n                                        {brand.name}\r\n                                    </Dropdown.Item>\r\n                                ))}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <Form.Control\r\n                            value={name}\r\n                            className=\"w-40\"\r\n                            placeholder=\"Название\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        ></Form.Control>\r\n                        <Form.Control\r\n                            value={price === 0 ? \"\" : price}\r\n                            className=\"w-80\"\r\n                            placeholder=\"Стоимость\"\r\n                            type=\"number\"\r\n                            onChange={(e) => setPrice(+e.target.value)}\r\n                        ></Form.Control>\r\n                        <Form.Control\r\n                            className=\"w-40\"\r\n                            placeholder=\"Кол-во\"\r\n                            type=\"number\"\r\n                        ></Form.Control>\r\n                        <Form.Control\r\n                            className=\"w-65\"\r\n                            type=\"file\"\r\n                            onChange={selectFile}\r\n                        ></Form.Control>\r\n                    </Form>\r\n                    <Button variant=\"outline-dark mt-2 mb-3\" onClick={addInfo}>\r\n                        Добавить новое свойство\r\n                    </Button>\r\n                    <div className=\"d-flex gap-2 flex-column\">\r\n                        {info.map((i) => (\r\n                            <Row className=\"d-flex\" key={i.number}>\r\n                                <Col md={5}>\r\n                                    <Form.Control\r\n                                        placeholder=\"Введите название\"\r\n                                        value={i.title}\r\n                                        onChange={(e) =>\r\n                                            changeInfo(\r\n                                                \"title\",\r\n                                                e.target.value,\r\n                                                i.number\r\n                                            )\r\n                                        }\r\n                                    ></Form.Control>\r\n                                </Col>\r\n                                <Col md={5}>\r\n                                    <Form.Control\r\n                                        placeholder=\"Введите описание\"\r\n                                        value={i.description}\r\n                                        onChange={(e) =>\r\n                                            changeInfo(\r\n                                                \"description\",\r\n                                                e.target.value,\r\n                                                i.number\r\n                                            )\r\n                                        }\r\n                                    ></Form.Control>\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <Button\r\n                                        variant=\"outline-dark w-100\"\r\n                                        onClick={() => removeInfo(i.number)}\r\n                                    >\r\n                                        Удалить\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        ))}\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant=\"outline-success\"\r\n                        onClick={() => addDevice()}\r\n                    >\r\n                        Добавить\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n);\r\n","D:\\GitHub\\React_app_med\\client\\src\\components\\DeviceList\\DeviceItem\\DeviceItem.tsx",[],{"ruleId":"136","severity":1,"message":"137","line":36,"column":8,"nodeType":"138","endLine":36,"endColumn":10,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":19},{"ruleId":"140","severity":1,"message":"144","line":5,"column":5,"nodeType":"142","messageId":"143","endLine":5,"endColumn":21},{"ruleId":"140","severity":1,"message":"145","line":10,"column":5,"nodeType":"142","messageId":"143","endLine":10,"endColumn":23},{"ruleId":"140","severity":1,"message":"146","line":11,"column":5,"nodeType":"142","messageId":"143","endLine":11,"endColumn":15},{"ruleId":"140","severity":1,"message":"147","line":15,"column":19,"nodeType":"142","messageId":"143","endLine":15,"endColumn":26},{"ruleId":"140","severity":1,"message":"148","line":1,"column":33,"nodeType":"142","messageId":"143","endLine":1,"endColumn":42},{"ruleId":"140","severity":1,"message":"149","line":1,"column":44,"nodeType":"142","messageId":"143","endLine":1,"endColumn":52},{"ruleId":"140","severity":1,"message":"150","line":3,"column":16,"nodeType":"142","messageId":"143","endLine":3,"endColumn":21},{"ruleId":"140","severity":1,"message":"151","line":3,"column":23,"nodeType":"142","messageId":"143","endLine":3,"endColumn":27},{"ruleId":"140","severity":1,"message":"152","line":3,"column":29,"nodeType":"142","messageId":"143","endLine":3,"endColumn":39},{"ruleId":"140","severity":1,"message":"153","line":3,"column":41,"nodeType":"142","messageId":"143","endLine":3,"endColumn":47},{"ruleId":"154","severity":1,"message":"155","line":33,"column":1,"nodeType":"156","messageId":"157","endLine":42,"endColumn":2},{"ruleId":"140","severity":1,"message":"158","line":8,"column":10,"nodeType":"142","messageId":"143","endLine":8,"endColumn":21},{"ruleId":"140","severity":1,"message":"159","line":8,"column":37,"nodeType":"142","messageId":"143","endLine":8,"endColumn":47},{"ruleId":"136","severity":1,"message":"160","line":32,"column":8,"nodeType":"138","endLine":32,"endColumn":70,"suggestions":"161"},{"ruleId":"140","severity":1,"message":"162","line":1,"column":14,"nodeType":"142","messageId":"143","endLine":1,"endColumn":24},{"ruleId":"140","severity":1,"message":"163","line":3,"column":10,"nodeType":"142","messageId":"143","endLine":3,"endColumn":17},{"ruleId":"140","severity":1,"message":"164","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":23},{"ruleId":"136","severity":1,"message":"165","line":31,"column":8,"nodeType":"138","endLine":31,"endColumn":10,"suggestions":"166"},{"ruleId":"140","severity":1,"message":"167","line":2,"column":41,"nodeType":"142","messageId":"143","endLine":2,"endColumn":44},{"ruleId":"140","severity":1,"message":"168","line":31,"column":17,"nodeType":"142","messageId":"143","endLine":31,"endColumn":21},{"ruleId":"140","severity":1,"message":"169","line":2,"column":16,"nodeType":"142","messageId":"143","endLine":2,"endColumn":19},{"ruleId":"140","severity":1,"message":"170","line":2,"column":21,"nodeType":"142","messageId":"143","endLine":2,"endColumn":30},{"ruleId":"140","severity":1,"message":"171","line":1,"column":33,"nodeType":"142","messageId":"143","endLine":1,"endColumn":39},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'devices' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["172"],"@typescript-eslint/no-unused-vars","'jwtDecode' is defined but never used.","Identifier","unusedVar","'DevicesInterface' is defined but never used.","'REGISTRATION_ROUTE' is defined but never used.","'SHOP_ROUTE' is defined but never used.","'devices' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Admin' is defined but never used.","'Auth' is defined but never used.","'DevicePage' is defined but never used.","'Basket' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'fetchBrands' is defined but never used.","'fetchTypes' is defined but never used.","React Hook useEffect has a missing dependency: 'devices'. Either include it or remove the dependency array.",["173"],"'useContext' is defined but never used.","'Context' is defined but never used.","'IoStarOutline' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["174"],"'Row' is defined but never used.","'data' is assigned a value but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'useRef' is defined but never used.",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [devices, user]",{"range":"181","text":"182"},"Update the dependencies array to be: [devices?.page, devices?.selectedType, devices?.selectedBrand, devices]",{"range":"183","text":"184"},"Update the dependencies array to be: [id]",{"range":"185","text":"186"},[1337,1339],"[devices, user]",[1148,1210],"[devices?.page, devices?.selectedType, devices?.selectedBrand, devices]",[1023,1025],"[id]"]